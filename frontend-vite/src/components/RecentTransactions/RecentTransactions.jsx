// src/components/RecentTransactions/RecentTransactions.jsx
import React from "react";
import { useNavigate } from "react-router-dom";
import TransactionItem from "./TransactionItem";
import styles from "./RecentTransactions.module.css";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faSpinner, faChevronDown, faHistory, faEye } from "@fortawesome/free-solid-svg-icons";
import AddEditTransactionModal from "../Transactions/AddEditTransactionModal";
import ConfirmDialog from "../Common/ConfirmDialog";
import Button from "../Common/Button";

const RecentTransactions = ({
  // Props t·ª´ cha
  transactions = [],
  isLoading = false,
  error = "",
  hasMore = false,
  totalCount = 0, // T·ªïng s·ªë giao d·ªãch  
  currentPage = 1, // Trang hi·ªán t·∫°i
  itemsPerPage = 10, // S·ªë item m·ªói trang

  // Callbacks t·ª´ cha
  onLoadMore,
  onEditRequest,
  onDeleteRequest,
  onConfirmDelete,
  onSubmitSuccess,
  onCloseModal,
  onCloseConfirm,
  onAddRequest, // Callback cho add transaction
  onCategoryClick, // Callback cho category click

  // State cho modals
  isModalOpen = false,
  isConfirmOpen = false,
  editingTransaction = null,
}) => {
  const navigate = useNavigate();

  const handleViewDetails = () => {
    navigate("/transactions");
  };

  const handleViewAll = () => {
    navigate("/transactions");
  };

  // T√≠nh to√°n th√¥ng tin load more
  const loadedCount = transactions.length;
  const remainingCount = totalCount - loadedCount;
  const canLoadMore = hasMore && remainingCount > 0;

  // Render content d·ª±a tr√™n state
  let content;
  if (isLoading && transactions.length === 0) {
    content = <div className={styles.loadingIndicator}>ƒêang t·∫£i...</div>;
  } else if (error) {
    content = (
      <p className={`${styles.errorText} ${styles.noTransactions}`}>{error}</p>
    );
  } else if (transactions.length === 0) {
    content = <p className={styles.noTransactions}>Ch∆∞a c√≥ giao d·ªãch n√†o.</p>;
  } else {
    content = (
      <div className={styles.tableWrapper}>
        <table className={styles.transactionsTable}>
          <thead>
            <tr>
              <th>Th·ªùi gian</th>
              <th>Danh m·ª•c</th>
              <th>M√¥ t·∫£</th>
              <th>Ph∆∞∆°ng th·ª©c TT</th>
              <th className={styles.amountHeader}>S·ªë ti·ªÅn</th>
              <th>H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {transactions.map((transaction) => (
              <TransactionItem
                key={transaction.id}
                transaction={transaction}
                onEditRequest={onEditRequest}
                onDeleteRequest={onDeleteRequest}
                onCategoryClick={onCategoryClick}
              />
            ))}
          </tbody>
        </table>
      </div>
    );
  }

  return (
    <div className={styles.recentTransactionsContainer}>
      <div className={styles.header}>
        {/* √Åp d·ª•ng title hierarchy H3 v·ªõi icon - Ch·ªâ c√≥ title */}
        <h3 className={styles.title}>
          <FontAwesomeIcon icon={faHistory} className={styles.titleIcon} />
          Giao d·ªãch g·∫ßn ƒë√¢y
        </h3>
      </div>
      
      {/* Transaction Summary v·ªõi n√∫t Xem t·∫•t c·∫£ */}
      {transactions.length > 0 && (
        <div className={styles.summarySection}>
          <div className={styles.summaryStats}>
            <span className={styles.summaryText}>
              üìä Hi·ªÉn th·ªã {transactions.length} giao d·ªãch g·∫ßn nh·∫•t
            </span>
            {totalCount > transactions.length && (
              <span className={styles.moreAvailable}>
                (c√≤n {totalCount - transactions.length} giao d·ªãch kh√°c)
              </span>
            )}
          </div>
          <div className={styles.summaryActions}>
            <Button
              onClick={handleViewDetails}
              variant="success"
              icon={<FontAwesomeIcon icon={faEye} />}
              className={styles.viewAllButton}
              style={{
                background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)', // M√†u xanh d∆∞∆°ng gi·ªëng "Xem chi ti·∫øt"
                color: 'white',
                border: '1px solid rgba(255, 255, 255, 0.2)'
              }}
            >
              Xem t·∫•t c·∫£
            </Button>
          </div>
        </div>
      )}
      
      {content}
      
      {/* Load More Section */}
      <div className={styles.loadMoreButtonOuterContainer}>
        {totalCount > 0 && loadedCount > 0 && (
          <div className={styles.loadMoreInfo}>
            ƒê√£ hi·ªÉn th·ªã {loadedCount} / {totalCount} giao d·ªãch
          </div>
        )}
        
        {canLoadMore && !isLoading && (
          <button onClick={onLoadMore} className={styles.loadMoreButton}>
            <span>T·∫£i th√™m ({Math.min(itemsPerPage, remainingCount)} giao d·ªãch)</span>
            <FontAwesomeIcon
              icon={faChevronDown}
              className={styles.loadMoreIcon}
            />
          </button>
        )}
        
        {isLoading && transactions.length > 0 && (
          <button className={styles.loadMoreButton} disabled>
            <FontAwesomeIcon
              icon={faSpinner}
              spin
              className={styles.loadMoreIcon}
            />
            <span>ƒêang t·∫£i...</span>
          </button>
        )}
        
        {!canLoadMore && totalCount > loadedCount && (
          <button onClick={handleViewAll} className={styles.loadMoreViewAllButton}>
            <span>Xem t·∫•t c·∫£ ({totalCount} giao d·ªãch)</span>
            <FontAwesomeIcon
              icon={faChevronDown}
              className={styles.loadMoreIcon}
            />
          </button>
        )}
      </div>
      {!hasMore && transactions.length > 0 && (
        <p className={styles.noMoreTransactions}>
          ƒê√£ hi·ªÉn th·ªã t·∫•t c·∫£ giao d·ªãch.
        </p>
      )}

      {/* Modals */}
      {isModalOpen && (
        <AddEditTransactionModal
          isOpen={isModalOpen}
          onClose={onCloseModal}
          onSubmitSuccess={onSubmitSuccess}
          mode={editingTransaction ? "edit" : "add"}
          initialData={editingTransaction}
        />
      )}
      <ConfirmDialog
        isOpen={isConfirmOpen}
        onClose={onCloseConfirm}
        onConfirm={onConfirmDelete}
        title="X√°c nh·∫≠n x√≥a"
        message="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a giao d·ªãch n√†y kh√¥ng?"
      />
    </div>
  );
};

export default RecentTransactions;
