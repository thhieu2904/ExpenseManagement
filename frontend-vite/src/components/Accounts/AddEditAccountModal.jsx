import React, { useState, useEffect } from "react";
import styles from "./AddEditAccountModal.module.css";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
// ‚úÖ THAY ƒê·ªîI 1: Import c√°c icon c·∫ßn thi·∫øt
import {
  faSpinner,
  faWallet,
  faLandmark,
} from "@fortawesome/free-solid-svg-icons";

const AddEditAccountModal = ({
  isOpen,
  mode,
  initialData,
  onClose,
  onSubmit,
}) => {
  const [name, setName] = useState("");
  const [type, setType] = useState("bank");
  const [balance, setBalance] = useState(""); // S·∫Ω l∆∞u s·ªë d·∫°ng chu·ªói, vd: "1000000"
  const [bankName, setBankName] = useState("");
  const [accountNumber, setAccountNumber] = useState("");
  const [error, setError] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    if (isOpen) {
      if (mode === "edit" && initialData) {
        setName(initialData.name || "");
        setType(initialData.type === "TIENMAT" ? "cash" : "bank");
        // ‚úÖ THAY ƒê·ªîI 2: Chuy·ªÉn ƒë·ªïi balance t·ª´ s·ªë sang chu·ªói
        setBalance(
          initialData.balance !== undefined ? String(initialData.balance) : ""
        );
        setBankName(initialData.bankName || "");
        setAccountNumber(initialData.accountNumber || "");
      } else {
        setName("");
        setType("bank");
        setBalance("");
        setBankName("");
        setAccountNumber("");
      }
      setError("");
    }
  }, [isOpen, mode, initialData]);

  // ‚úÖ THAY ƒê·ªîI 3: Th√™m h√†m x·ª≠ l√Ω v√† ƒë·ªãnh d·∫°ng cho √¥ nh·∫≠p s·ªë d∆∞
  const handleBalanceChange = (e) => {
    const inputValue = e.target.value;
    const rawValue = inputValue.replace(/[^0-9]/g, "");
    setBalance(rawValue);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!name.trim()) {
      setError("T√™n ngu·ªìn ti·ªÅn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
      return;
    }
    if (mode === "add" && !balance.trim()) {
      setError("S·ªë d∆∞ ban ƒë·∫ßu kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
      return;
    }

    setError("");
    setIsSubmitting(true);

    try {
      await onSubmit({
        id: initialData?.id,
        name: name.trim(),
        type,
        balance: balance, // G·ª≠i ƒëi chu·ªói s·ªë thu·∫ßn
        bankName: type === "bank" ? bankName.trim() : "",
        accountNumber: type === "bank" ? accountNumber.trim() : "",
      });
    } catch (apiError) {
      setError(apiError.message || "C√≥ l·ªói x·∫£y ra.");
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!isOpen) return null;

  // ‚úÖ THAY ƒê·ªîI 4: T·∫°o gi√° tr·ªã hi·ªÉn th·ªã ƒë√£ ƒë·ªãnh d·∫°ng cho √¥ s·ªë d∆∞
  const displayBalance = balance
    ? parseInt(balance, 10).toLocaleString("vi-VN")
    : "";

  return (
    <div className={styles.modalOverlay} onClick={onClose}>
      <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
        <div className={styles.modalHeader}>
          <div className={styles.modalHeaderIcon}>
            üí≥
          </div>
          <h2 className={styles.modalTitle}>
            {mode === "add" ? "Th√™m Ngu·ªìn Ti·ªÅn" : "S·ª≠a Ngu·ªìn Ti·ªÅn"}
          </h2>
          <button onClick={onClose} className={styles.closeButton} aria-label="ƒê√≥ng modal">
            √ó
          </button>
        </div>

        <form onSubmit={handleSubmit} className={styles.accountForm}>
          {error && <p className={styles.errorMessage}>{error}</p>}

          <div className={styles.formGroup}>
            <label htmlFor="accountName" className={styles.formLabel}>
              T√™n ngu·ªìn ti·ªÅn <span className={styles.requiredStar}>*</span>
            </label>
            <input
              type="text"
              id="accountName"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className={styles.formInput}
              placeholder="V√≠ d·ª•: V√≠ c√° nh√¢n, T√†i kho·∫£n Techcombank"
              required
              disabled={isSubmitting}
            />
          </div>

          <div className={styles.formGroup}>
            <label className={styles.formLabel}>
              Lo·∫°i <span className={styles.requiredStar}>*</span>
            </label>
            {/* ‚úÖ THAY ƒê·ªîI 5: C·∫≠p nh·∫≠t c·∫•u tr√∫c radio button */}
            <div className={styles.radioGroup}>
              <label>
                <input
                  type="radio"
                  name="accountType"
                  value="cash"
                  checked={type === "cash"}
                  onChange={(e) => setType(e.target.value)}
                  disabled={isSubmitting || mode === "edit"}
                  className={styles.radioInput}
                />
                <span className={`${styles.radioLabelText} ${styles.cash}`}>
                  <FontAwesomeIcon
                    icon={faWallet}
                    className={styles.radioIcon}
                  />
                  Ti·ªÅn m·∫∑t
                </span>
              </label>
              <label>
                <input
                  type="radio"
                  name="accountType"
                  value="bank"
                  checked={type === "bank"}
                  onChange={(e) => setType(e.target.value)}
                  disabled={isSubmitting || mode === "edit"}
                  className={styles.radioInput}
                />
                <span className={`${styles.radioLabelText} ${styles.bank}`}>
                  <FontAwesomeIcon
                    icon={faLandmark}
                    className={styles.radioIcon}
                  />
                  Ng√¢n h√†ng/Th·∫ª
                </span>
              </label>
            </div>
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="initialBalance" className={styles.formLabel}>
              S·ªë d∆∞ {mode === "add" ? "ban ƒë·∫ßu" : ""}
              {mode === "add" && <span className={styles.requiredStar}>*</span>}
            </label>
            {/* ‚úÖ THAY ƒê·ªîI 6: C·∫≠p nh·∫≠t √¥ nh·∫≠p s·ªë d∆∞ */}
            <div className={styles.balanceInputWrapper}>
              <input
                type="text"
                inputMode="numeric"
                id="initialBalance"
                value={displayBalance}
                onChange={handleBalanceChange}
                className={styles.balanceInput}
                placeholder="0"
                disabled={isSubmitting || mode === "edit"}
              />
              <span className={styles.currencySymbol}>‚Ç´</span>
            </div>
            {mode === "edit" && (
              <p className={styles.formHint}>
                S·ªë d∆∞ ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông qua c√°c giao d·ªãch.
              </p>
            )}
          </div>

          {type === "bank" && (
            <>
              <div className={styles.formGroup}>
                <label htmlFor="bankName" className={styles.formLabel}>
                  T√™n ng√¢n h√†ng
                </label>
                <input
                  type="text"
                  id="bankName"
                  value={bankName}
                  onChange={(e) => setBankName(e.target.value)}
                  className={styles.formInput}
                  placeholder="V√≠ d·ª•: BIDV, Techcombank"
                  disabled={isSubmitting}
                />
              </div>
              <div className={styles.formGroup}>
                <label htmlFor="accountNumber" className={styles.formLabel}>
                  S·ªë t√†i kho·∫£n
                </label>
                <input
                  type="text"
                  id="accountNumber"
                  value={accountNumber}
                  onChange={(e) => setAccountNumber(e.target.value)}
                  className={styles.formInput}
                  placeholder="V√≠ d·ª•: 123456789"
                  disabled={isSubmitting}
                />
              </div>
            </>
          )}

          <div className={styles.formActions}>
            <button
              type="button"
              onClick={onClose}
              disabled={isSubmitting}
              className={`${styles.formButton} ${styles.cancelButton}`}
            >
              H·ªßy <span className={styles.keyboardHint}>Esc</span>
            </button>
            <button
              type="submit"
              disabled={isSubmitting}
              className={`${styles.formButton} ${styles.submitButton}`}
            >
              {isSubmitting ? (
                <FontAwesomeIcon icon={faSpinner} spin />
              ) : mode === "add" ? (
                <>Th√™m Ngu·ªìn Ti·ªÅn <span className={styles.keyboardHint}>Enter</span></>
              ) : (
                <>L∆∞u Thay ƒê·ªïi <span className={styles.keyboardHint}>Enter</span></>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddEditAccountModal;
