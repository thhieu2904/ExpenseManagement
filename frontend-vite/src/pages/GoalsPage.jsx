import React, { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { getGoals, deleteGoal } from "../api/goalService";
import GoalsList from "../components/Goals/GoalsList";
import AddEditGoalModal from "../components/Goals/AddEditGoalModal";
import { getProfile } from "../api/profileService";
import HeaderCard from "../components/Common/HeaderCard";
import styles from "../styles/GoalsPage.module.css";
import headerStyles from "../components/Common/HeaderCard.module.css";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faPlus, faBullseye } from "@fortawesome/free-solid-svg-icons";
import Header from "../components/Header/Header";
import Navbar from "../components/Navbar/Navbar";
import Footer from "../components/Footer/Footer";
import AddFundsModal from "../components/Goals/AddFundsModal";
import ConfirmDialog from "../components/Common/ConfirmDialog";
import Button from "../components/Common/Button";
import { getGreeting, getFullDate } from "../utils/timeHelpers";

export default function GoalsPage() {
  // ‚úÖ 2. KH·ªûI T·∫†O QUERY CLIENT ƒê·ªÇ T∆Ø∆†NG T√ÅC V·ªöI REACT QUERY
  const queryClient = useQueryClient();

  // === C√ÅC STATE C≈® V·∫™N C·∫¶N CHO VI·ªÜC ƒêI·ªÄU KHI·ªÇN UI (MODAL, FORM) ===
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isAddFundsModalOpen, setIsAddFundsModalOpen] = useState(false);
  const [isConfirmOpen, setIsConfirmOpen] = useState(false);
  const [currentGoal, setCurrentGoal] = useState(null);
  const [goalToDelete, setGoalToDelete] = useState(null);
  const [editMode, setEditMode] = useState("add");
  // =============================================================

  // ‚úÖ 3. THAY TH·∫æ TO√ÄN B·ªò LOGIC FETCH C≈® B·∫∞NG `useQuery`
  // `useQuery` s·∫Ω t·ª± ƒë·ªông qu·∫£n l√Ω `isLoading`, `error`, v√† `data` cho b·∫°n.
  const {
    data: goals = [], // D√πng `data` thay cho state `goals`, ƒë·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† []
    isLoading, // Thay cho state `isLoading`
    error, // Thay cho state `error`
  } = useQuery({
    queryKey: ["goals"], // ƒê√¢y l√† "t√™n ƒë·ªãnh danh" cho d·ªØ li·ªáu n√†y. R·∫•t quan tr·ªçng!
    queryFn: getGoals, // H√†m ƒë·ªÉ fetch d·ªØ li·ªáu. React Query s·∫Ω t·ª± g·ªçi n√≥.
    select: (response) => response.data, // Ch·ªâ l·∫•y ph·∫ßn data t·ª´ response c·ªßa axios, gi√∫p component g·ªçn h∆°n.
  });

  // ‚úÖ THAY TH·∫æ: L·∫•y th√¥ng tin ng∆∞·ªùi d√πng qua react-query
  const { data: userProfile } = useQuery({
    queryKey: ["userProfile"],
    queryFn: getProfile,
    select: (data) => data.data,
    staleTime: 1000 * 60 * 5, // D·ªØ li·ªáu user ƒë∆∞·ª£c cho l√† "t∆∞∆°i" trong 5 ph√∫t
  });
  const userName = userProfile?.fullname || "B·∫°n";
  const userAvatar = userProfile?.avatar || null;

  // ‚úÖ 4. THAY TH·∫æ LOGIC X√ìA B·∫∞NG `useMutation`
  // `useMutation` d√πng cho c√°c h√†nh ƒë·ªông thay ƒë·ªïi d·ªØ li·ªáu (POST, PUT, DELETE).
  const deleteMutation = useMutation({
    mutationFn: deleteGoal, // H√†m th·ª±c hi·ªán h√†nh ƒë·ªông x√≥a.
    onSuccess: () => {
      // KHI X√ìA TH√ÄNH C√îNG:
      // B√°o cho React Query bi·∫øt d·ªØ li·ªáu v·ªõi key "goals" ƒë√£ c≈© v√† c·∫ßn ƒë∆∞·ª£c t·∫£i l·∫°i.
      // React Query s·∫Ω t·ª± ƒë·ªông g·ªçi l·∫°i `useQuery` ·ªü tr√™n. KH√îNG C·∫¶N G·ªåI `fetchGoals()` TH·ª¶ C√îNG!
      queryClient.invalidateQueries({ queryKey: ["goals"] });
      handleCloseConfirmDialog(); // ƒê√≥ng dialog x√°c nh·∫≠n
    },
  });

  // ‚úÖ 5. B·ªé HO√ÄN TO√ÄN H√ÄM `fetchGoals` v√† `useEffect` G·ªåI N√ì. CH√öNG KH√îNG C√íN C·∫¶N THI·∫æT.

  // ‚úÖ 6. H√ÄM N√ÄY GI·ªú CH·ªà C·∫¶N L√ÄM M·ªöI D·ªÆ LI·ªÜU V√Ä ƒê√ìNG MODAL
  const handleActionSuccess = () => {
    queryClient.invalidateQueries({ queryKey: ["goals"] });
    setIsModalOpen(false);
    setIsAddFundsModalOpen(false);
  };

  // ‚úÖ 7. H√ÄM X√ÅC NH·∫¨N X√ìA GI·ªú SI√äU ƒê∆†N GI·∫¢N
  const handleConfirmDelete = () => {
    if (!goalToDelete) return;
    deleteMutation.mutate(goalToDelete); // Ch·ªâ c·∫ßn g·ªçi h√†m mutate!
  };

  // C√°c h√†m m·ªü/ƒë√≥ng modal kh√°c kh√¥ng thay ƒë·ªïi
  const handleOpenAddModal = () => {
    setEditMode("add");
    setCurrentGoal(null);
    setIsModalOpen(true);
  };
  const handleOpenEditModal = (goal) => {
    setEditMode("edit");
    setCurrentGoal(goal);
    setIsModalOpen(true);
  };
  const handleOpenAddFundsModal = (goal) => {
    setCurrentGoal(goal);
    setIsAddFundsModalOpen(true);
  };
  const handleRequestDelete = (goalId) => {
    setGoalToDelete(goalId);
    setIsConfirmOpen(true);
  };
  const handleCloseConfirmDialog = () => {
    setIsConfirmOpen(false);
    setGoalToDelete(null);
  };

  // === Helper functions cho header ===
  // C·∫¢I TI·∫æN: Th√™m emoji t√πy theo tr·∫°ng th√°i m·ª•c ti√™u
  const getGoalMoodEmoji = (ongoing, completed, total) => {
    if (total === 0) return "ü§î";
    if (completed > 0 && ongoing === 0) return "üéâ"; // ƒê√£ ho√†n th√†nh h·∫øt
    if (completed > ongoing) return "üèÜ"; // Th√†nh t√≠ch t·ªët
    if (ongoing > 0) return "üí™"; // ƒêang n·ªó l·ª±c
    return "üëç";
  };

  const getSmartContext = () => {
    if (isLoading) return "ƒêang t·∫£i m·ª•c ti√™u c·ªßa b·∫°n...";
    if (error) return "Kh√¥ng th·ªÉ t·∫£i m·ª•c ti√™u.";

    const ongoingGoals = goals.filter((g) => g.status === "IN_PROGRESS").length;
    const completedGoals = goals.filter((g) => g.status === "COMPLETED").length;

    // C·∫¢I TI·∫æN: ƒê∆∞a ra c√°c th√¥ng ƒëi·ªáp theo ng·ªØ c·∫£nh
    if (goals.length === 0) {
      return "B·∫°n ch∆∞a c√≥ m·ª•c ti√™u n√†o. H√£y t·∫°o m·ªôt m·ª•c ti√™u ngay!";
    }
    if (ongoingGoals > 0 && completedGoals === 0) {
      return `B·∫°n ƒëang c√≥ ${ongoingGoals} m·ª•c ti√™u c·∫ßn th·ª±c hi·ªán. B·∫Øt ƒë·∫ßu ngay th√¥i!`;
    }
    if (ongoingGoals === 0 && completedGoals > 0) {
      return `Xu·∫•t s·∫Øc! B·∫°n ƒë√£ ho√†n th√†nh ${completedGoals} m·ª•c ti√™u. S·∫µn s√†ng cho th·ª≠ th√°ch m·ªõi ch∆∞a?`;
    }

    return `B·∫°n c√≥ ${ongoingGoals} m·ª•c ti√™u ƒëang th·ª±c hi·ªán v√† ƒë√£ ho√†n th√†nh ${completedGoals} m·ª•c ti√™u. C·ªë l√™n!`;
  };

  return (
    <div>
      <Header userName={userName} userAvatar={userAvatar} />
      <Navbar />
      <main className={styles.pageWrapper}>
        <HeaderCard
          className={styles.goalsPageHeader}
          gridIcon={<FontAwesomeIcon icon={faBullseye} />}
          gridTitle={`${getGreeting()}, ${userName}!`}
          gridSubtitle="H√£y chinh ph·ª•c c√°c m·ª•c ti√™u t√†i ch√≠nh c·ªßa b·∫°n"
          gridStats={
            <div className={styles.widgetPlaceholder}>
              {/* Placeholder cho widget th·ªëng k√™ m·ª•c ti√™u */}
              <p>Widget th·ªëng k√™ s·∫Ω s·ªõm c√≥ m·∫∑t!</p>
            </div>
          }
          gridInfo={
            <>
              <div className="smartContext">
                <span className="contextText">{getSmartContext()}</span>
                <span className={headerStyles.moodEmoji}>
                  {getGoalMoodEmoji(
                    goals.filter((g) => g.status === "IN_PROGRESS").length,
                    goals.filter((g) => g.status === "COMPLETED").length,
                    goals.length
                  )}
                </span>
              </div>
              <span className={headerStyles.miniStats}>{getFullDate()}</span>
            </>
          }
          gridAction={
            <Button
              onClick={handleOpenAddModal}
              icon={<FontAwesomeIcon icon={faPlus} />}
              variant="primary"
              className={styles.addButton}
            >
              T·∫°o m·ª•c ti√™u m·ªõi
            </Button>
          }
        />
        <div className={styles.content}>
          {isLoading && (
            <div className={styles.loading}>ƒêang t·∫£i d·ªØ li·ªáu...</div>
          )}
          {error && (
            <div className={styles.error}>
              {"ƒê√£ c√≥ l·ªói x·∫£y ra: " + error.message}
            </div>
          )}

          {!isLoading && !error && (
            <GoalsList
              goals={goals}
              onEdit={handleOpenEditModal}
              onDelete={handleRequestDelete}
              onAddFunds={handleOpenAddFundsModal}
            />
          )}
        </div>
      </main>

      {/* C√°c Modal v·∫´n gi·ªØ nguy√™n, nh∆∞ng gi·ªù ch√∫ng s·∫Ω g·ªçi `handleActionSuccess` ƒë·ªÉ t·ª± ƒë·ªông c·∫≠p nh·∫≠t list */}
      {isModalOpen && (
        <AddEditGoalModal
          isOpen={isModalOpen}
          onClose={() => setIsModalOpen(false)}
          onSubmitSuccess={handleActionSuccess}
          mode={editMode}
          initialData={currentGoal}
        />
      )}

      {isConfirmOpen && (
        <ConfirmDialog
          isOpen={isConfirmOpen}
          onClose={() =>
            deleteMutation.isPending ? null : handleCloseConfirmDialog()
          }
          onConfirm={handleConfirmDelete}
          title="X√°c nh·∫≠n X√≥a M·ª•c ti√™u"
          message="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a m·ª•c ti√™u n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c."
          // ‚úÖ 9. S·ª¨ D·ª§NG TR·∫†NG TH√ÅI LOADING V√Ä ERROR T·ª™ `useMutation`
          isProcessing={deleteMutation.isPending}
          errorMessage={deleteMutation.error?.response?.data?.message}
          confirmText="X√≥a"
        />
      )}

      {isAddFundsModalOpen && (
        <AddFundsModal
          isOpen={isAddFundsModalOpen}
          onClose={() => setIsAddFundsModalOpen(false)}
          onSubmitSuccess={handleActionSuccess}
          goalData={currentGoal}
        />
      )}

      <Footer />
    </div>
  );
}
