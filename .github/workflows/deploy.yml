name: 🚀 Deploy Expense Management

# Thêm quyền security-events: write để cho phép upload kết quả scan
permissions:
  contents: read
  packages: write
  security-events: write

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: expense-management

jobs:
  # Test Job
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: |
            backend/package-lock.json
            frontend-vite/package-lock.json

      - name: Install Backend Dependencies
        run: |
          cd backend
          npm ci

      - name: Install Frontend Dependencies
        run: |
          cd frontend-vite
          npm ci

      - name: Run Backend Tests
        run: |
          cd backend
          npm test || echo "No tests found"

      - name: Run Frontend Tests
        run: |
          cd frontend-vite
          npm test || echo "No tests found"

      - name: Build Frontend
        run: |
          cd frontend-vite
          npm run build

  # Build và Push Docker Images
  build-and-push:
    name: 🐳 Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    # Thêm permissions ở đây để tuân thủ nguyên tắc đặc quyền tối thiểu
    permissions:
      contents: read
      packages: write
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service == 'frontend' && 'frontend-vite' || matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Development
  deploy-dev:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Development Server
        run: |
          echo "Deploying to development environment..."
          # Add your deployment script here
          # Example: SSH to server and run deployment commands

  # Deploy to Production
  deploy-prod:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/production'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production Server
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment script here

  # Security Scan (ĐÃ SỬA LỖI VÀ CẢI TIẾN)
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    # Cải tiến: Dùng matrix để scan cả 2 image
    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      # Lỗi 1: Thêm bước checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner for ${{ matrix.service }}
        uses: aquasecurity/trivy-action@master
        with:
          # Cập nhật để lấy đúng image theo matrix
          image-ref: "${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:latest"
          format: "sarif"
          # Tạo file output riêng cho mỗi service
          output: "trivy-results-${{ matrix.service }}.sarif"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          # Upload đúng file SARIF theo service
          sarif_file: "trivy-results-${{ matrix.service }}.sarif"
          # Thêm category để phân biệt kết quả trong tab Security
          category: ${{ matrix.service }}
