const mongoose = require("mongoose");
const Transaction = require("../../models/Transaction");
const Category = require("../../models/Category");
const Account = require("../../models/Account");

class TransactionHandler {
  // X·ª≠ l√Ω th√™m giao d·ªãch
  async handleAddTransaction(
    transaction,
    userId,
    responseForUser,
    originalMessage = ""
  ) {
    try {
      // Ki·ªÉm tra n·∫øu transaction thi·∫øu th√¥ng tin
      if (!transaction || !transaction.amount || transaction.amount === null) {
        // Set conversation state ƒë·ªÉ h·ªèi s·ªë ti·ªÅn
        return {
          response:
            responseForUser ||
            `B·∫°n ${transaction?.type === "CHITIEU" ? "chi" : "thu"} "${
              transaction?.name || "giao d·ªãch"
            }" h·∫øt bao nhi√™u ti·ªÅn?`,
          action: "NEED_MORE_INFO",
          waitingFor: "transaction_amount",
          pendingData: {
            name: transaction?.name || "Giao d·ªãch m·ªõi",
            type: transaction?.type || "CHITIEU",
            accountGuess: transaction?.accountGuess,
            categoryGuess: transaction?.categoryGuess,
            originalMessage: originalMessage,
          },
        };
      }

      // Validate required fields
      if (!transaction.name || !transaction.type) {
        return {
          response: "Th√¥ng tin giao d·ªãch kh√¥ng ƒë·∫ßy ƒë·ªß. Vui l√≤ng th·ª≠ l·∫°i.",
          action: "CHAT_RESPONSE",
        };
      }

      // Extract date t·ª´ originalMessage n·∫øu c√≥
      let transactionDate = new Date(); // Default l√† h√¥m nay
      if (originalMessage) {
        transactionDate =
          this.extractDateFromTransactionMessage(originalMessage);
        console.log("=== EXTRACTING DATE FROM ORIGINAL MESSAGE ===");
        console.log("Original message:", originalMessage);
        console.log("Extracted date:", transactionDate);
        console.log("=== END EXTRACT DATE ===");
      }

      // Format date cho hi·ªÉn th·ªã
      const formattedDate = transactionDate.toLocaleDateString("vi-VN");

      return {
        response:
          responseForUser ||
          `X√°c nh·∫≠n th√™m giao d·ªãch:\n‚Ä¢ T√™n: ${
            transaction.name
          }\n‚Ä¢ S·ªë ti·ªÅn: ${Number(
            transaction.amount
          ).toLocaleString()}ƒë\n‚Ä¢ Lo·∫°i: ${
            transaction.type === "CHITIEU" ? "Chi ti√™u" : "Thu nh·∫≠p"
          }\n‚Ä¢ Danh m·ª•c: ${
            transaction.categoryGuess || "Kh√¥ng x√°c ƒë·ªãnh"
          }\n‚Ä¢ Ng√†y: ${formattedDate}`,
        action: "CONFIRM_ADD_TRANSACTION",
        data: {
          name: transaction.name,
          amount: Number(transaction.amount),
          type: transaction.type,
          categoryGuess: transaction.categoryGuess,
          accountGuess: transaction.accountGuess,
          date: transactionDate,
        },
      };
    } catch (error) {
      console.error("Error handling add transaction:", error);
      return {
        response:
          "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω th√¥ng tin giao d·ªãch. Vui l√≤ng th·ª≠ l·∫°i.",
        action: "CHAT_RESPONSE",
      };
    }
  }

  // L·∫•y giao d·ªãch v·ªõi filter t·ª´ entities
  async getTransactionsWithFilter(userId, entities, responseForUser) {
    try {
      console.log("=== GETTING TRANSACTIONS WITH FILTER ===");
      console.log("Entities:", JSON.stringify(entities, null, 2));

      const userObjectId =
        typeof userId === "string"
          ? new mongoose.Types.ObjectId(userId)
          : userId;

      // T·∫°o filter query d·ª±a tr√™n entities
      let transactionFilter = { userId: userObjectId };
      let dateFilter = {};

      // Filter theo th·ªùi gian
      if (entities?.timeFilter) {
        const timeInfo = this.parseTimeFilter(entities.timeFilter);
        if (timeInfo) {
          const startOfMonth = new Date(timeInfo.year, timeInfo.month - 1, 1);
          const endOfMonth = new Date(
            timeInfo.year,
            timeInfo.month,
            0,
            23,
            59,
            59,
            999
          );
          dateFilter = {
            date: {
              $gte: startOfMonth,
              $lte: endOfMonth,
            },
          };
        }
      }

      // Filter theo danh m·ª•c
      if (entities?.categoryFilter) {
        const category = await Category.findOne({
          userId: userObjectId,
          name: { $regex: new RegExp(entities.categoryFilter, "i") },
        });
        if (category) {
          transactionFilter.categoryId = category._id;
        }
      }

      // Filter theo t√†i kho·∫£n
      if (entities?.specificAccount) {
        const account = await Account.findOne({
          userId: userObjectId,
          name: { $regex: new RegExp(entities.specificAccount, "i") },
        });
        if (account) {
          transactionFilter.accountId = account._id;
        }
      }

      // Filter theo s·ªë ti·ªÅn
      if (entities?.amountFilter) {
        const amountCondition = this.parseAmountFilter(entities.amountFilter);
        if (amountCondition) {
          transactionFilter.amount = amountCondition;
        }
      }

      // Combine filters
      const finalFilter = { ...transactionFilter, ...dateFilter };
      console.log("Transaction filter:", finalFilter);

      const transactions = await Transaction.find(finalFilter)
        .sort({ date: -1 })
        .limit(20)
        .populate("categoryId", "name type")
        .populate("accountId", "name type");

      if (transactions.length === 0) {
        return {
          response:
            responseForUser ||
            "Kh√¥ng t√¨m th·∫•y giao d·ªãch n√†o ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán.",
          action: "CHAT_RESPONSE",
        };
      }

      // T·∫°o ti√™u ƒë·ªÅ ph√π h·ª£p v·ªõi filter
      let title = "üìã <strong>Giao d·ªãch";
      if (entities?.categoryFilter) title += ` ${entities.categoryFilter}`;
      if (entities?.timeFilter) title += ` ${entities.timeFilter}`;
      if (entities?.specificAccount) title += ` t·ª´ ${entities.specificAccount}`;
      title += ":</strong>";

      const transactionList = transactions
        .map((t, index) => {
          const typeIcon = t.type === "CHITIEU" ? "üí∏" : "üí∞";
          const amount = t.amount ? t.amount.toLocaleString() : "0";
          const formattedDate = new Date(t.date).toLocaleDateString("vi-VN");

          return `${index + 1}. ${typeIcon} ${t.name} - ${amount}ƒë
   üìÇ ${t.categoryId?.name || "Kh√¥ng c√≥ danh m·ª•c"}
   üè¶ ${t.accountId?.name || "Kh√¥ng c√≥ t√†i kho·∫£n"}
   üìÖ ${formattedDate}`;
        })
        .join("\n\n");

      return {
        response: `${title}\n\n${transactionList}`,
        action: "CHAT_RESPONSE",
        data: {
          transactions: transactions.map((t) => ({
            id: t._id,
            name: t.name,
            amount: t.amount,
            type: t.type,
            category: t.categoryId?.name,
            account: t.accountId?.name,
            date: t.date,
          })),
          filters: entities,
        },
      };
    } catch (error) {
      console.error("Error getting filtered transactions:", error);
      return {
        response: "C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch giao d·ªãch.",
        action: "CHAT_RESPONSE",
      };
    }
  }

  // X·ª≠ l√Ω t√¨m ki·∫øm giao d·ªãch v·ªõi filter
  async handleQueryTransactionsWithFilter(userId, entities, responseForUser) {
    try {
      const userObjectId =
        typeof userId === "string"
          ? new mongoose.Types.ObjectId(userId)
          : userId;

      let transactionFilter = { userId: userObjectId };

      // Filter theo search term
      if (entities?.searchTerm) {
        transactionFilter.name = {
          $regex: new RegExp(entities.searchTerm, "i"),
        };
      }

      // Filter theo amount range
      if (entities?.amountFilter) {
        const amountCondition = this.parseAmountFilter(entities.amountFilter);
        if (amountCondition) {
          transactionFilter.amount = amountCondition;
        }
      }

      // Filter theo time
      if (entities?.timeFilter) {
        const timeInfo = this.parseTimeFilter(entities.timeFilter);
        if (timeInfo) {
          const startOfMonth = new Date(timeInfo.year, timeInfo.month - 1, 1);
          const endOfMonth = new Date(
            timeInfo.year,
            timeInfo.month,
            0,
            23,
            59,
            59,
            999
          );
          transactionFilter.date = {
            $gte: startOfMonth,
            $lte: endOfMonth,
          };
        }
      }

      const transactions = await Transaction.find(transactionFilter)
        .sort({ date: -1 })
        .limit(20)
        .populate("categoryId", "name type")
        .populate("accountId", "name type");

      if (transactions.length === 0) {
        return {
          response: "Kh√¥ng t√¨m th·∫•y giao d·ªãch n√†o ph√π h·ª£p v·ªõi t√¨m ki·∫øm.",
          action: "CHAT_RESPONSE",
        };
      }

      let title = "üîç <strong>K·∫øt qu·∫£ t√¨m ki·∫øm";
      if (entities?.searchTerm) title += ` "${entities.searchTerm}"`;
      if (entities?.amountFilter) title += ` (${entities.amountFilter})`;
      title += ":</strong>";

      const transactionList = transactions
        .map((t, index) => {
          const typeIcon = t.type === "CHITIEU" ? "üí∏" : "üí∞";
          const amount = t.amount ? t.amount.toLocaleString() : "0";
          const formattedDate = new Date(t.date).toLocaleDateString("vi-VN");

          return `${index + 1}. ${typeIcon} ${t.name} - ${amount}ƒë\n   üìÇ ${
            t.categoryId?.name || "Kh√¥ng c√≥ danh m·ª•c"
          }\n   üìÖ ${formattedDate}`;
        })
        .join("\n\n");

      return {
        response: `${title}\n\n${transactionList}`,
        action: "CHAT_RESPONSE",
        data: {
          transactions: transactions.map((t) => ({
            id: t._id,
            name: t.name,
            amount: t.amount,
            type: t.type,
            category: t.categoryId?.name,
            account: t.accountId?.name,
            date: t.date,
          })),
          searchFilters: entities,
        },
      };
    } catch (error) {
      console.error("Error querying transactions:", error);
      return {
        response: "C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm giao d·ªãch.",
        action: "CHAT_RESPONSE",
      };
    }
  }

  // Parse time filter th√†nh month/year
  parseTimeFilter(timeFilter) {
    if (!timeFilter) return null;

    const now = new Date();
    const currentMonth = now.getMonth() + 1;
    const currentYear = now.getFullYear();

    const lowerFilter = timeFilter.toLowerCase();

    if (
      lowerFilter.includes("th√°ng n√†y") ||
      lowerFilter.includes("this month")
    ) {
      return { month: currentMonth, year: currentYear };
    }

    if (
      lowerFilter.includes("th√°ng tr∆∞·ªõc") ||
      lowerFilter.includes("last month")
    ) {
      const lastMonth = currentMonth === 1 ? 12 : currentMonth - 1;
      const lastYear = currentMonth === 1 ? currentYear - 1 : currentYear;
      return { month: lastMonth, year: lastYear };
    }

    // Parse "th√°ng X"
    const monthMatch = lowerFilter.match(/th√°ng\s*(\d+)/);
    if (monthMatch) {
      const month = parseInt(monthMatch[1]);
      if (month >= 1 && month <= 12) {
        return { month, year: currentYear };
      }
    }

    return null;
  }

  // Parse amount filter th√†nh MongoDB condition
  parseAmountFilter(amountFilter) {
    if (!amountFilter) return null;

    const lowerFilter = amountFilter.toLowerCase();

    // "tr√™n X"
    const aboveMatch = lowerFilter.match(/tr√™n\s*(\d+)/);
    if (aboveMatch) {
      return { $gt: parseInt(aboveMatch[1]) };
    }

    // "d∆∞·ªõi X"
    const belowMatch = lowerFilter.match(/d∆∞·ªõi\s*(\d+)/);
    if (belowMatch) {
      return { $lt: parseInt(belowMatch[1]) };
    }

    // "t·ª´ X ƒë·∫øn Y"
    const rangeMatch = lowerFilter.match(/t·ª´\s*(\d+)\s*ƒë·∫øn\s*(\d+)/);
    if (rangeMatch) {
      return {
        $gte: parseInt(rangeMatch[1]),
        $lte: parseInt(rangeMatch[2]),
      };
    }

    return null;
  }

  // Extract date t·ª´ transaction message
  extractDateFromTransactionMessage(message) {
    // Implementation chi ti·∫øt cho extract date
    const now = new Date();
    const cleanMessage = message.toLowerCase().trim();

    // C√°c pattern ng√†y c·ª• th·ªÉ
    const datePatterns = [
      /(\d{1,2})\/(\d{1,2})\/(\d{4})/,
      /(\d{1,2})\/(\d{1,2})/,
      /ng√†y\s*(\d{1,2})\s*th√°ng\s*(\d{1,2})/i,
    ];

    for (const pattern of datePatterns) {
      const match = cleanMessage.match(pattern);
      if (match) {
        const day = parseInt(match[1]);
        const month = parseInt(match[2]);
        const year = match[3] ? parseInt(match[3]) : now.getFullYear();

        if (day >= 1 && day <= 31 && month >= 1 && month <= 12) {
          return new Date(year, month - 1, day);
        }
      }
    }

    // C√°c ng√†y t∆∞∆°ng ƒë·ªëi
    if (cleanMessage.includes("h√¥m qua")) {
      const yesterday = new Date(now);
      yesterday.setDate(now.getDate() - 1);
      return yesterday;
    }

    if (cleanMessage.includes("ng√†y mai")) {
      const tomorrow = new Date(now);
      tomorrow.setDate(now.getDate() + 1);
      return tomorrow;
    }

    // M·∫∑c ƒë·ªãnh l√† h√¥m nay
    return now;
  }

  // T·∫°o transaction th·ª±c t·∫ø trong database (ƒë∆∞·ª£c g·ªçi t·ª´ routes)
  async createTransactionInDB(transactionData) {
    try {
      console.log("=== CREATING TRANSACTION IN DATABASE ===");
      console.log("Transaction data:", transactionData);

      const { name, amount, type, categoryGuess, accountGuess, date, userId } =
        transactionData;

      // Ki·ªÉm tra user c√≥ √≠t nh·∫•t 1 account kh√¥ng
      const userAccountCount = await Account.countDocuments({ userId: userId });
      if (userAccountCount === 0) {
        throw new Error(
          "Ng∆∞·ªùi d√πng ch∆∞a c√≥ t√†i kho·∫£n n√†o. Vui l√≤ng t·∫°o t√†i kho·∫£n tr∆∞·ªõc khi th√™m giao d·ªãch."
        );
      }

      // T√¨m category v√† account ph√π h·ª£p
      let categoryId = null;
      let accountId = null;

      // T√¨m category
      if (categoryGuess) {
        const category = await Category.findOne({
          userId: userId,
          name: { $regex: new RegExp(categoryGuess, "i") },
        });
        if (category) {
          categoryId = category._id;
        }
      }

      // T√¨m account
      if (accountGuess) {
        const account = await Account.findOne({
          userId: userId,
          name: { $regex: new RegExp(accountGuess, "i") },
        });
        if (account) {
          accountId = account._id;
        }
      }

      // N·∫øu kh√¥ng t√¨m th·∫•y account, l·∫•y account ƒë·∫ßu ti√™n
      if (!accountId) {
        const firstAccount = await Account.findOne({ userId: userId });
        if (firstAccount) {
          accountId = firstAccount._id;
        } else {
          throw new Error(
            "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n n√†o. Vui l√≤ng t·∫°o t√†i kho·∫£n tr∆∞·ªõc."
          );
        }
      }

      // T·∫°o transaction m·ªõi
      const newTransaction = new Transaction({
        name,
        amount,
        type,
        categoryId, // C√≥ th·ªÉ null n·∫øu kh√¥ng t√¨m th·∫•y category
        accountId,
        date: date || new Date(),
        userId: userId,
      });

      const savedTransaction = await newTransaction.save();
      console.log("‚úÖ Transaction saved successfully:", savedTransaction);

      return savedTransaction;
    } catch (error) {
      console.error("‚ùå Error creating transaction in DB:", error);
      throw error;
    }
  }
}

module.exports = TransactionHandler;
