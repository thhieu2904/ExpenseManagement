const asyncHandler = require("express-async-handler");
const Goal = require("../models/Goal");
const Transaction = require("../models/Transaction"); // Import model Transaction
const Category = require("../models/Category");
const Account = require("../models/Account");

// ‚úÖ HELPER FUNCTION: T√åM HO·∫∂C T·∫†O CATEGORY CHO GOAL
const findOrCreateGoalCategory = async (goal, userId) => {
  const categoryName = goal.name; // B·ªè emoji üí∞, ch·ªâ d√πng t√™n goal
  let goalCategory = await Category.findOne({
    name: categoryName,
    userId: userId,
    isGoalCategory: true, // Th√™m ƒëi·ªÅu ki·ªán n√†y ƒë·ªÉ tr√°nh tr√πng v·ªõi category th∆∞·ªùng
  });

  if (!goalCategory) {
    goalCategory = await Category.create({
      name: categoryName,
      type: "CHITIEU",
      userId: userId,
      icon: "fa-bullseye", // Set icon m·∫∑c ƒë·ªãnh cho goal category
      isGoalCategory: true,
      goalId: goal._id,
    });
  } else {
    // C·∫≠p nh·∫≠t icon n·∫øu category ƒë√£ t·ªìn t·∫°i nh∆∞ng ch∆∞a c√≥ icon ho·∫∑c c√≥ icon m·∫∑c ƒë·ªãnh
    if (!goalCategory.icon || goalCategory.icon === "fa-question-circle") {
      goalCategory.icon = "fa-bullseye";
      await goalCategory.save();
    }
  }

  return goalCategory;
};

// @desc    L·∫•y t·∫•t c·∫£ m·ª•c ti√™u c·ªßa ng∆∞·ªùi d√πng
// @route   GET /api/goals
// @access  Private
// trong file backend/controllers/goalController.js

const getGoals = asyncHandler(async (req, res) => {
  const {
    page = 1,
    limit = 10,
    filter,
    sortType = "CREATED",
    sortDirection = "desc",
  } = req.query;

  const query = {
    user: req.user.id,
    archived: false,
  };

  // S·ª≠a ƒëo·∫°n n√†y: so s√°nh filter ch·ªØ hoa
  if (filter && filter.toUpperCase() === "ARCHIVED") {
    query.archived = true;
  } else if (filter && filter.toUpperCase() === "ALL") {
    delete query.archived;
  }

  // ‚úÖ X√¢y d·ª±ng ƒë·ªëi t∆∞·ª£ng s·∫Øp x·∫øp ƒë·ªông
  const sort = { isPinned: -1 }; // Lu√¥n ∆∞u ti√™n m·ª•c ƒë∆∞·ª£c ghim
  if (sortType === "PROGRESS") {
    // S·∫Øp x·∫øp theo ti·∫øn ƒë·ªô c·∫ßn logic ph·ª©c t·∫°p h∆°n, c√≥ th·ªÉ c·∫ßn aggregation
    // T·∫°m th·ªùi s·∫Øp x·∫øp theo ng√†y t·∫°o
    sort.createdAt = sortDirection === "desc" ? -1 : 1;
  } else if (sortType === "DEADLINE") {
    sort.deadline = sortDirection === "desc" ? -1 : 1;
  } else {
    // M·∫∑c ƒë·ªãnh l√† 'CREATED'
    sort.createdAt = sortDirection === "desc" ? -1 : 1;
  }

  const startIndex = (parseInt(page) - 1) * parseInt(limit);
  const total = await Goal.countDocuments(query);

  const goals = await Goal.find(query)
    .sort(sort) // ‚úÖ S·ª≠ d·ª•ng ƒë·ªëi t∆∞·ª£ng sort ƒë·ªông
    .limit(parseInt(limit))
    .skip(startIndex);

  res.status(200).json({
    data: goals,
    currentPage: parseInt(page),
    totalPages: Math.ceil(total / parseInt(limit)),
    totalGoals: total,
  });
});
// @desc    T·∫°o m·ª•c ti√™u m·ªõi
// @route   POST /api/goals
// @access  Private
const createGoal = asyncHandler(async (req, res) => {
  const { name, targetAmount, deadline, icon } = req.body;

  if (!name || !targetAmount) {
    res.status(400);
    throw new Error("T√™n v√† S·ªë ti·ªÅn m·ª•c ti√™u l√† b·∫Øt bu·ªôc");
  }

  const goal = await Goal.create({
    user: req.user.id,
    name,
    targetAmount,
    deadline,
    icon: icon || "üéØ", // Icon m·∫∑c ƒë·ªãnh emoji ƒë·∫πp cho m·ª•c ti√™u
    currentAmount: 0, // ‚úÖ ƒê·∫£m b·∫£o currentAmount ƒë∆∞·ª£c set
    status: "in-progress", // ‚úÖ ƒê·∫£m b·∫£o status ƒë∆∞·ª£c set
    isPinned: false, // ‚úÖ ƒê·∫£m b·∫£o isPinned ƒë∆∞·ª£c set
    archived: false, // ‚úÖ ƒê·∫£m b·∫£o archived ƒë∆∞·ª£c set
  });

  res.status(201).json(goal);
});

// @desc    C·∫≠p nh·∫≠t m·ª•c ti√™u
// @route   PUT /api/goals/:id
// @access  Private
const updateGoal = asyncHandler(async (req, res) => {
  const goal = await Goal.findById(req.params.id);

  if (!goal) {
    res.status(404);
    throw new Error("Kh√¥ng t√¨m th·∫•y m·ª•c ti√™u");
  }

  // ƒê·∫£m b·∫£o ng∆∞·ªùi d√πng ch·ªâ c·∫≠p nh·∫≠t m·ª•c ti√™u c·ªßa ch√≠nh m√¨nh
  if (goal.user.toString() !== req.user.id) {
    res.status(401);
    throw new Error("Kh√¥ng ƒë∆∞·ª£c ph√©p");
  }

  // ‚úÖ C·∫¨P NH·∫¨T CATEGORY N·∫æU T√äN GOAL THAY ƒê·ªîI
  const oldCategoryName = goal.name; // B·ªè emoji üí∞
  const newName = req.body.name;

  if (newName && newName !== goal.name) {
    const newCategoryName = newName; // B·ªè emoji üí∞
    await Category.findOneAndUpdate(
      {
        name: oldCategoryName,
        userId: req.user.id,
        isGoalCategory: true,
        goalId: goal._id,
      },
      {
        name: newCategoryName,
        icon: "fa-bullseye", // ƒê·∫£m b·∫£o icon ƒë∆∞·ª£c set khi update
      }
    );
  }

  // ‚úÖ Prepare update data with validation
  const updateData = {
    ...(req.body.name && { name: req.body.name }),
    ...(req.body.targetAmount && { targetAmount: req.body.targetAmount }),
    ...(req.body.deadline !== undefined && { deadline: req.body.deadline }),
    ...(req.body.icon && { icon: req.body.icon }),
    ...(req.body.currentAmount !== undefined && {
      currentAmount: req.body.currentAmount,
    }),
    ...(req.body.isPinned !== undefined && { isPinned: req.body.isPinned }),
    ...(req.body.archived !== undefined && { archived: req.body.archived }),
    ...(req.body.status && { status: req.body.status }),
  };

  // ‚úÖ Auto-update status based on currentAmount vs targetAmount
  if (
    updateData.currentAmount !== undefined ||
    updateData.targetAmount !== undefined
  ) {
    const currentAmount =
      updateData.currentAmount !== undefined
        ? updateData.currentAmount
        : goal.currentAmount;
    const targetAmount =
      updateData.targetAmount !== undefined
        ? updateData.targetAmount
        : goal.targetAmount;
    updateData.status =
      currentAmount >= targetAmount ? "completed" : "in-progress";
  }

  const updatedGoal = await Goal.findByIdAndUpdate(req.params.id, updateData, {
    new: true, // Tr·∫£ v·ªÅ document ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    runValidators: true, // ‚úÖ Run validation on update
  });

  res.status(200).json(updatedGoal);
});

// @desc    X√≥a m·ª•c ti√™u
// @route   DELETE /api/goals/:id
// @access  Private

const deleteGoal = asyncHandler(async (req, res) => {
  // S·ª≠ d·ª•ng findOneAndDelete ƒë·ªÉ t√¨m v√† x√≥a trong m·ªôt b∆∞·ªõc,
  // ƒë·ªìng th·ªùi ki·ªÉm tra quy·ªÅn s·ªü h·ªØu (user: req.user.id)
  const goal = await Goal.findOneAndDelete({
    _id: req.params.id,
    user: req.user.id,
  });

  // N·∫øu kh√¥ng t√¨m th·∫•y m·ª•c ti√™u n√†o kh·ªõp v·ªõi ID v√† user ID,
  // c√≥ nghƒ©a l√† m·ª•c ti√™u kh√¥ng t·ªìn t·∫°i ho·∫∑c ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn.
  if (!goal) {
    res.status(404);
    throw new Error("Kh√¥ng t√¨m th·∫•y m·ª•c ti√™u ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a");
  }

  // ‚úÖ D·ªåN D·∫∏P CATEGORY LI√äN QUAN ƒê·∫æN GOAL (N·∫æU C√ì)
  const categoryName = goal.name; // B·ªè emoji üí∞
  await Category.findOneAndDelete({
    name: categoryName,
    userId: req.user.id,
    isGoalCategory: true,
    goalId: goal._id,
  });

  // N·∫øu x√≥a th√†nh c√¥ng, tr·∫£ v·ªÅ id ƒë√£ x√≥a
  res.status(200).json({ id: req.params.id });
});

// @desc    N·∫°p ti·ªÅn v√†o m·ª•c ti√™u
// @route   POST /api/goals/:id/add-funds
// @access  Private
const addFundsToGoal = asyncHandler(async (req, res) => {
  const { amount, accountId } = req.body;
  const goalId = req.params.id;

  if (!amount || amount <= 0 || !accountId) {
    res.status(400);
    throw new Error("Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn v√† ch·ªçn t√†i kho·∫£n ngu·ªìn h·ª£p l·ªá");
  }

  const account = await Account.findById(accountId);
  if (!account || account.userId.toString() !== req.user.id) {
    res.status(404);
    throw new Error("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ngu·ªìn.");
  }
  if (account.balance < amount) {
    res.status(400);
    throw new Error(
      "S·ªë d∆∞ trong t√†i kho·∫£n kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch n√†y."
    );
  }

  const goal = await Goal.findById(goalId);
  // ‚úÖ TH√äM L·∫†I C√ÅC CHECK B·ªä THI·∫æU
  if (!goal) {
    res.status(404);
    throw new Error("Kh√¥ng t√¨m th·∫•y m·ª•c ti√™u");
  }
  if (goal.user.toString() !== req.user.id) {
    res.status(401);
    throw new Error("Kh√¥ng ƒë∆∞·ª£c ph√©p truy c·∫≠p m·ª•c ti√™u n√†y");
  }

  // ‚úÖ 2. T√åM HO·∫∂C T·∫†O CATEGORY CHO GOAL
  const goalCategory = await findOrCreateGoalCategory(goal, req.user.id);

  // ‚úÖ 3. T·∫†O TRANSACTION V·ªöI TH√îNG TIN CHI TI·∫æT V√Ä D·ªÑ HI·ªÇU
  const currentProgress = (
    ((goal.currentAmount + Number(amount)) / goal.targetAmount) *
    100
  ).toFixed(1);
  const transaction = await Transaction.create({
    userId: req.user.id,
    type: "CHITIEU",
    name: `Ti·∫øt ki·ªám: ${goal.name}`,
    amount: Number(amount),
    date: new Date(),
    accountId: accountId,
    categoryId: goalCategory._id,
    note: `üí∞ N·∫°p ${Number(amount).toLocaleString(
      "vi-VN"
    )}ƒë | Ti·∫øn ƒë·ªô: ${currentProgress}% (${(
      goal.currentAmount + Number(amount)
    ).toLocaleString("vi-VN")}ƒë/${goal.targetAmount.toLocaleString("vi-VN")}ƒë)`,
    // Kh√¥ng set icon cho transaction, ƒë·ªÉ frontend s·ª≠ d·ª•ng icon m·∫∑c ƒë·ªãnh
    goalId: goal._id,
  });

  // ... ph·∫ßn c·∫≠p nh·∫≠t goal gi·ªØ nguy√™n ...
  goal.currentAmount += Number(amount);
  if (goal.currentAmount >= goal.targetAmount) {
    goal.status = "completed";
  }
  const updatedGoal = await goal.save();

  account.balance -= Number(amount);
  await account.save();
  res.status(200).json({ updatedGoal, transaction });
});

// @desc    ƒê·ªïi tr·∫°ng th√°i archived c·ªßa m·ª•c ti√™u
// @route   PATCH /api/goals/:id/archive
// @access  Private
const toggleArchiveGoal = asyncHandler(async (req, res) => {
  const goal = await Goal.findById(req.params.id);
  if (!goal) {
    res.status(404);
    throw new Error("Kh√¥ng t√¨m th·∫•y m·ª•c ti√™u");
  }
  if (goal.user.toString() !== req.user.id) {
    res.status(401);
    throw new Error("Kh√¥ng ƒë∆∞·ª£c ph√©p");
  }
  goal.archived = !goal.archived;
  await goal.save();
  res.status(200).json(goal);
});

// @desc    ƒê·ªïi tr·∫°ng th√°i isPinned c·ªßa m·ª•c ti√™u
// @route   PATCH /api/goals/:id/pin
// @access  Private
const togglePinGoal = asyncHandler(async (req, res) => {
  const goal = await Goal.findById(req.params.id);
  if (!goal) {
    res.status(404);
    throw new Error("Kh√¥ng t√¨m th·∫•y m·ª•c ti√™u");
  }
  if (goal.user.toString() !== req.user.id) {
    res.status(401);
    throw new Error("Kh√¥ng ƒë∆∞·ª£c ph√©p");
  }
  goal.isPinned = !goal.isPinned;
  await goal.save();
  res.status(200).json(goal);
});

// @desc    Fix icon cho c√°c goal categories hi·ªán t·∫°i
// @route   PATCH /api/goals/fix-categories-icon
// @access  Private
const fixGoalCategoriesIcon = asyncHandler(async (req, res) => {
  try {
    // T√¨m t·∫•t c·∫£ goal categories c·ªßa user hi·ªán t·∫°i
    const goalCategories = await Category.find({
      userId: req.user.id,
      isGoalCategory: true,
    });

    let updatedCount = 0;
    for (const category of goalCategories) {
      if (!category.icon || category.icon === "fa-question-circle") {
        category.icon = "fa-bullseye";
        await category.save();
        updatedCount++;
      }
    }

    res.status(200).json({
      message: `ƒê√£ c·∫≠p nh·∫≠t icon cho ${updatedCount} goal categories`,
      updatedCount,
    });
  } catch (error) {
    res.status(500);
    throw new Error("L·ªói khi c·∫≠p nh·∫≠t icon cho goal categories");
  }
});

module.exports = {
  getGoals,
  createGoal,
  updateGoal,
  deleteGoal,
  addFundsToGoal,
  toggleArchiveGoal,
  togglePinGoal,
  fixGoalCategoriesIcon,
};
