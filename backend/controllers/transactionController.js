// backend/controllers/transactionController.js
const mongoose = require("mongoose");
const Transaction = require("../models/Transaction");
const Account = require("../models/Account");
exports.createTransaction = async (req, res) => {
  try {
    const { name, amount, type, categoryId, accountId, date, note } = req.body;

    if (!name || amount === undefined || !type || !categoryId || !accountId) {
      return res.status(400).json({
        error: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.",
        details: "Thi·∫øu c√°c tr∆∞·ªùng th√¥ng tin b·∫Øt bu·ªôc.",
      });
    }

    const transactionAmount = Math.round(Number(amount));

    if (isNaN(transactionAmount)) {
      return res.status(400).json({ error: "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá." });
    }

    const newTransaction = new Transaction({
      userId: req.user.id,
      name,
      amount: transactionAmount,
      type,
      categoryId,
      accountId,
      date,
      note,
    });

    const savedTransaction = await newTransaction.save();

    // ‚úÖ B·ªé HO√ÄN TO√ÄN LOGIC C·∫¨P NH·∫¨T ACCOUNT.INITIALBALANCE
    // ƒêo·∫°n code c·∫≠p nh·∫≠t account.initialBalance ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi ƒë√¢y

    res.status(201).json(savedTransaction);
  } catch (err) {
    if (err.name === "ValidationError") {
      return res
        .status(400)
        .json({ error: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.", details: err.message });
    }
    console.error("L·ªói khi t·∫°o giao d·ªãch:", err);
    res
      .status(500)
      .json({ error: "L·ªói m√°y ch·ªß n·ªôi b·ªô.", details: err.message });
  }
};
// THAY TH·∫æ TO√ÄN B·ªò H√ÄM C≈® `getAllTransactions` b·∫±ng h√†m m·ªõi n√†y

exports.getAllTransactions = async (req, res) => {
  try {
    const userId = new mongoose.Types.ObjectId(req.user.id);

    // L·∫•y c√°c tham s·ªë t·ª´ query
    const {
      page = 1,
      limit = 10,
      keyword,
      type,
      categoryId,
      accountId,
      // ‚úÖ B·ªî SUNG THAM S·ªê L·ªåC THEO KHO·∫¢NG NG√ÄY
      startDate,
      endDate,
      dateFrom, // ‚úÖ Th√™m dateFrom
      dateTo, // ‚úÖ Th√™m dateTo
    } = req.query;

    const skip = (parseInt(page, 10) - 1) * parseInt(limit, 10);

    // --- X√¢y d·ª±ng b·ªô l·ªçc (match criteria) ---
    const matchCriteria = { userId };

    // ‚úÖ L·∫•y th√™m tham s·ªë year v√† month t·ª´ query
    const { year, month } = req.query;

    // 1. ‚úÖ LOGIC L·ªåC TH·ªúI GIAN ƒê∆Ø·ª¢C ∆ØU TI√äN
    if (dateFrom && dateTo) {
      // ∆Øu ti√™n cao nh·∫•t: l·ªçc theo dateFrom/dateTo (t·ª´ click dayCell)
      // T·∫°o Date object cho local timezone (gi·ªëng c√°ch ng∆∞·ªùi d√πng nh·∫≠p)
      const startOfDay = new Date(dateFrom);
      const endOfDay = new Date(dateTo);
      endOfDay.setHours(23, 59, 59, 999); // Set to end of day

      console.log(`üîç Filter by dateFrom/dateTo: ${dateFrom} to ${dateTo}`);
      console.log(`üîç Actual date range: ${startOfDay} to ${endOfDay}`);
      console.log(
        `üîç ISO strings: ${startOfDay.toISOString()} to ${endOfDay.toISOString()}`
      );

      matchCriteria.date = {
        $gte: startOfDay,
        $lte: endOfDay,
      };
    } else if (startDate && endDate) {
      // ∆Øu ti√™n th·ª© 2: l·ªçc theo kho·∫£ng ng√†y (tu·∫ßn)
      matchCriteria.date = {
        $gte: new Date(startDate),
        $lte: new Date(endDate),
      };
    } else if (year && month) {
      // L·ªçc theo th√°ng/nƒÉm c·ª• th·ªÉ
      const startOfMonth = new Date(parseInt(year), parseInt(month) - 1, 1);
      const endOfMonth = new Date(
        parseInt(year),
        parseInt(month),
        0,
        23,
        59,
        59,
        999
      );
      matchCriteria.date = {
        $gte: startOfMonth,
        $lte: endOfMonth,
      };
    } else if (year) {
      // L·ªçc theo nƒÉm
      const startOfYear = new Date(parseInt(year), 0, 1);
      const endOfYear = new Date(parseInt(year), 11, 31, 23, 59, 59, 999);
      matchCriteria.date = {
        $gte: startOfYear,
        $lte: endOfYear,
      };
    }

    // 2. L·ªçc theo t·ª´ kh√≥a (t√™n/m√¥ t·∫£ giao d·ªãch)
    if (keyword) {
      matchCriteria.name = { $regex: keyword, $options: "i" };
    }

    // 3. L·ªçc theo lo·∫°i giao d·ªãch
    if (type && type !== "ALL") {
      matchCriteria.type = type;
    }

    // 4. L·ªçc theo danh m·ª•c
    if (categoryId && categoryId !== "ALL") {
      matchCriteria.categoryId = new mongoose.Types.ObjectId(categoryId);
    }

    // 5. L·ªçc theo t√†i kho·∫£n
    if (accountId && accountId !== "ALL") {
      matchCriteria.accountId = new mongoose.Types.ObjectId(accountId);
    }

    // --- Th·ª±c hi·ªán truy v·∫•n ---
    console.log(
      `üîç Final matchCriteria:`,
      JSON.stringify(matchCriteria, null, 2)
    );
    console.log(`üîç Query params:`, {
      dateFrom,
      dateTo,
      startDate,
      endDate,
      year,
      month,
      type,
      categoryId,
      accountId,
    });

    const totalTransactions = await Transaction.countDocuments(matchCriteria);
    const totalPages = Math.ceil(totalTransactions / parseInt(limit, 10));

    // ‚úÖ T√≠nh t·ªïng s·ªë giao d·ªãch theo lo·∫°i cho to√†n b·ªô chu k·ª≥ (kh√¥ng b·ªã gi·ªõi h·∫°n ph√¢n trang)
    const [incomeCount, expenseCount] = await Promise.all([
      Transaction.countDocuments({ ...matchCriteria, type: "THUNHAP" }),
      Transaction.countDocuments({ ...matchCriteria, type: "CHITIEU" }),
    ]);

    const transactions = await Transaction.find(matchCriteria)
      .populate({ path: "accountId", select: "name type" })
      .populate({ path: "categoryId", select: "name icon type" })
      .sort({ date: -1, createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit, 10));

    console.log(
      `üîç Found ${totalTransactions} total transactions, returning ${transactions.length} transactions`
    );
    if (transactions.length > 0) {
      console.log(`üîç Sample transaction date:`, transactions[0].date);
    }

    // Format l·∫°i d·ªØ li·ªáu tr·∫£ v·ªÅ (gi·ªØ nguy√™n)
    const formattedTransactions = transactions.map((t) => ({
      id: t._id,
      createdAt: t.createdAt,
      date: t.date,
      description: t.name,
      note: t.note,
      amount: t.amount,
      type: t.type,
      category: t.categoryId,
      paymentMethod: t.accountId,
    }));

    res.json({
      data: formattedTransactions,
      currentPage: parseInt(page, 10),
      totalPages: totalPages,
      totalCount: totalTransactions,
      incomeCount: incomeCount, // ‚úÖ T·ªïng s·ªë giao d·ªãch thu nh·∫≠p c·ªßa chu k·ª≥
      expenseCount: expenseCount, // ‚úÖ T·ªïng s·ªë giao d·ªãch chi ti√™u c·ªßa chu k·ª≥
    });
  } catch (err) {
    console.error("L·ªói khi l·∫•y danh s√°ch giao d·ªãch:", err);
    res.status(500).json({ error: "L·ªói m√°y ch·ªß", details: err.message });
  }
};

// X√ìA GIAO D·ªäCH
exports.deleteTransaction = async (req, res) => {
  try {
    const transaction = await Transaction.findOne({
      _id: req.params.id,
      userId: req.user.id,
    })
      .populate("categoryId")
      .exec();

    if (!transaction)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y giao d·ªãch" });

    // Ki·ªÉm tra n·∫øu l√† giao d·ªãch n·∫°p v√†o m·ª•c ti√™u
    const isGoalFund =
      transaction.categoryId &&
      (transaction.categoryId.isGoalFund === true ||
        transaction.categoryId.name === "Ti·∫øt ki·ªám M·ª•c ti√™u");

    if (isGoalFund) {
      // 1. Ho√†n ti·ªÅn v·ªÅ t√†i kho·∫£n ngu·ªìn
      const account = await Account.findById(transaction.accountId);
      if (account) {
        account.balance += transaction.amount;
        await account.save();
      }

      // 2. Tr·ª´ s·ªë ti·ªÅn ƒë√£ n·∫°p kh·ªèi m·ª•c ti√™u
      // ∆Øu ti√™n d√πng goalId n·∫øu c√≥
      let goal = null;
      if (transaction.goalId) {
        goal = await require("../models/Goal").findOne({
          _id: transaction.goalId,
          user: req.user.id,
        });
      } else {
        // Fallback: t√¨m theo t√™n m·ª•c ti√™u nh∆∞ c≈©
        let goalName = null;
        if (
          transaction.name &&
          transaction.name.startsWith("N·∫°p ti·ªÅn cho m·ª•c ti√™u:")
        ) {
          goalName = transaction.name
            .replace('N·∫°p ti·ªÅn cho m·ª•c ti√™u: "', "")
            .replace('"', "");
        }
        if (goalName) {
          goal = await require("../models/Goal").findOne({
            user: req.user.id,
            name: goalName,
          });
        }
      }
      if (goal) {
        goal.currentAmount -= transaction.amount;
        if (goal.currentAmount < 0) goal.currentAmount = 0;
        if (
          goal.currentAmount < goal.targetAmount &&
          goal.status === "completed"
        ) {
          goal.status = "in_progress";
        }
        await goal.save();
      }
    }

    // X√≥a transaction
    await Transaction.deleteOne({ _id: transaction._id });

    res.json({ message: "X√≥a giao d·ªãch th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.updateTransaction = async (req, res) => {
  try {
    const { id: transactionId } = req.params;
    const userId = req.user.id;
    const { name, amount, type, categoryId, accountId, date, note } = req.body;

    const transaction = await Transaction.findOne({
      _id: transactionId,
      userId,
    })
      .populate("categoryId")
      .exec();
    if (!transaction) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y giao d·ªãch." });
    }

    // Ki·ªÉm tra n·∫øu l√† giao d·ªãch n·∫°p v√†o m·ª•c ti√™u
    const isGoalFund =
      transaction.categoryId &&
      (transaction.categoryId.isGoalFund === true ||
        transaction.categoryId.name === "Ti·∫øt ki·ªám M·ª•c ti√™u");

    if (isGoalFund) {
      // 1. N·∫øu ƒë·ªïi t√†i kho·∫£n ngu·ªìn
      if (String(accountId) !== String(transaction.accountId)) {
        // Ho√†n l·∫°i s·ªë ti·ªÅn c≈© v√†o t√†i kho·∫£n c≈©
        const oldAccount = await Account.findById(transaction.accountId);
        if (oldAccount) {
          oldAccount.balance += transaction.amount;
          await oldAccount.save();
        }
        // Tr·ª´ s·ªë ti·ªÅn m·ªõi ·ªü t√†i kho·∫£n m·ªõi
        const newAccount = await Account.findById(accountId);
        if (newAccount) {
          newAccount.balance -= amount;
          await newAccount.save();
        }
      } else if (amount !== transaction.amount) {
        // N·∫øu ch·ªâ ƒë·ªïi s·ªë ti·ªÅn (kh√¥ng ƒë·ªïi t√†i kho·∫£n)
        const diff = amount - transaction.amount;
        const account = await Account.findById(accountId);
        if (account) {
          account.balance -= diff;
          await account.save();
        }
      }

      // 2. C·∫≠p nh·∫≠t l·∫°i s·ªë ti·ªÅn ƒë√£ n·∫°p v√†o m·ª•c ti√™u
      let goal = null;
      if (transaction.goalId) {
        goal = await require("../models/Goal").findOne({
          _id: transaction.goalId,
          user: userId,
        });
      }
      if (goal) {
        goal.currentAmount = goal.currentAmount - transaction.amount + amount;
        if (goal.currentAmount < 0) goal.currentAmount = 0;
        if (
          goal.currentAmount < goal.targetAmount &&
          goal.status === "completed"
        ) {
          goal.status = "in_progress";
        }
        if (goal.currentAmount >= goal.targetAmount) {
          goal.status = "completed";
        }
        await goal.save();
      }
    }

    // C·∫≠p nh·∫≠t transaction
    transaction.name = name;
    transaction.amount = amount;
    transaction.type = type;
    transaction.categoryId = categoryId;
    transaction.accountId = accountId;
    transaction.date = date;
    transaction.note = note;
    await transaction.save();

    res.status(200).json(transaction);
  } catch (err) {
    res.status(500).json({
      error: "L·ªói server khi c·∫≠p nh·∫≠t giao d·ªãch.",
      details: err.message,
    });
  }
};

// Hi·ªÉn th·ªã lich giao d·ªãch theo th√°ng
