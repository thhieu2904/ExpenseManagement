/**
 * @swagger
 * tags:
 *   name: Transactions
 *   description: üí∏ Qu·∫£n l√Ω giao d·ªãch thu/chi
 *
 * components:
 *   schemas:
 *     Transaction:
 *       type: object
 *       required:
 *         - name
 *         - amount
 *         - type
 *         - categoryId
 *         - accountId
 *       properties:
 *         _id:
 *           type: string
 *         name:
 *           type: string
 *           example: Mua c√† ph√™
 *         amount:
 *           type: number
 *           example: 50000
 *         type:
 *           type: string
 *           enum: [THUNHAP, CHITIEU]
 *           example: CHITIEU
 *         categoryId:
 *           type: string
 *           description: ID c·ªßa danh m·ª•c
 *         accountId:
 *           type: string
 *           description: ID c·ªßa t√†i kho·∫£n
 *         note:
 *           type: string
 *           example: Cafe s√°ng ·ªü qu√°n quen
 *         date:
 *           type: string
 *           format: date-time
 *           example: 2024-01-15T10:30:00.000Z
 *         userId:
 *           type: string
 *         createdAt:
 *           type: string
 *           format: date-time
 *         updatedAt:
 *           type: string
 *           format: date-time
 *     TransactionWithDetails:
 *       allOf:
 *         - $ref: '#/components/schemas/Transaction'
 *         - type: object
 *           properties:
 *             category:
 *               type: object
 *               properties:
 *                 _id:
 *                   type: string
 *                 name:
 *                   type: string
 *                 icon:
 *                   type: string
 *             account:
 *               type: object
 *               properties:
 *                 _id:
 *                   type: string
 *                 name:
 *                   type: string
 *                 bankName:
 *                   type: string
 */

const express = require("express");
const router = express.Router();
const verifyToken = require("../middleware/verifyToken");
const transactionController = require("../controllers/transactionController");

/**
 * @swagger
 * /api/transactions:
 *   get:
 *     summary: L·∫•y danh s√°ch giao d·ªãch
 *     tags: [Transactions]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *         description: S·ªë trang
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 10
 *         description: S·ªë l∆∞·ª£ng giao d·ªãch m·ªói trang
 *       - in: query
 *         name: type
 *         schema:
 *           type: string
 *           enum: [ALL, THUNHAP, CHITIEU]
 *         description: L·ªçc theo lo·∫°i giao d·ªãch
 *       - in: query
 *         name: categoryId
 *         schema:
 *           type: string
 *         description: L·ªçc theo danh m·ª•c
 *       - in: query
 *         name: accountId
 *         schema:
 *           type: string
 *         description: L·ªçc theo t√†i kho·∫£n
 *       - in: query
 *         name: keyword
 *         schema:
 *           type: string
 *         description: T√¨m ki·∫øm theo t√™n giao d·ªãch
 *       - in: query
 *         name: dateFrom
 *         schema:
 *           type: string
 *           format: date
 *         description: T·ª´ ng√†y
 *       - in: query
 *         name: dateTo
 *         schema:
 *           type: string
 *           format: date
 *         description: ƒê·∫øn ng√†y
 *       - in: query
 *         name: sortBy
 *         schema:
 *           type: string
 *           enum: [date, amount, name]
 *           default: date
 *         description: S·∫Øp x·∫øp theo
 *       - in: query
 *         name: sortOrder
 *         schema:
 *           type: string
 *           enum: [asc, desc]
 *           default: desc
 *         description: Th·ª© t·ª± s·∫Øp x·∫øp
 *     responses:
 *       200:
 *         description: Danh s√°ch giao d·ªãch
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 data:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/TransactionWithDetails'
 *                 pagination:
 *                   type: object
 *                   properties:
 *                     currentPage:
 *                       type: integer
 *                     totalPages:
 *                       type: integer
 *                     totalTransactions:
 *                       type: integer
 *                     hasNext:
 *                       type: boolean
 *                     hasPrev:
 *                       type: boolean
 *
 *   post:
 *     summary: T·∫°o giao d·ªãch m·ªõi
 *     tags: [Transactions]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - name
 *               - amount
 *               - type
 *               - categoryId
 *               - accountId
 *             properties:
 *               name:
 *                 type: string
 *                 example: Mua c√† ph√™
 *               amount:
 *                 type: number
 *                 example: 50000
 *               type:
 *                 type: string
 *                 enum: [THUNHAP, CHITIEU]
 *                 example: CHITIEU
 *               categoryId:
 *                 type: string
 *                 description: ID c·ªßa danh m·ª•c
 *               accountId:
 *                 type: string
 *                 description: ID c·ªßa t√†i kho·∫£n
 *               note:
 *                 type: string
 *                 example: Cafe s√°ng ·ªü qu√°n quen
 *               date:
 *                 type: string
 *                 format: date-time
 *                 example: 2024-01-15T10:30:00.000Z
 *     responses:
 *       201:
 *         description: Giao d·ªãch ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Transaction'
 *       400:
 *         description: Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc
 *       500:
 *         description: L·ªói server
 */

/**
 * @swagger
 * /api/transactions/{id}:
 *   put:
 *     summary: C·∫≠p nh·∫≠t giao d·ªãch
 *     tags: [Transactions]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: ID c·ªßa giao d·ªãch
 *     requestBody:
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *               amount:
 *                 type: number
 *               type:
 *                 type: string
 *                 enum: [THUNHAP, CHITIEU]
 *               categoryId:
 *                 type: string
 *               accountId:
 *                 type: string
 *               note:
 *                 type: string
 *               date:
 *                 type: string
 *                 format: date-time
 *     responses:
 *       200:
 *         description: C·∫≠p nh·∫≠t th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Transaction'
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y giao d·ªãch
 *
 *   delete:
 *     summary: X√≥a giao d·ªãch
 *     tags: [Transactions]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID c·ªßa giao d·ªãch
 *     responses:
 *       200:
 *         description: X√≥a th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: X√≥a giao d·ªãch th√†nh c√¥ng
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y giao d·ªãch
 */

/**
 * @swagger
 * /api/transactions/all:
 *   delete:
 *     summary: X√≥a t·∫•t c·∫£ giao d·ªãch c·ªßa ng∆∞·ªùi d√πng
 *     tags: [Transactions]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: X√≥a th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: ƒê√£ x√≥a to√†n b·ªô giao d·ªãch!
 *                 deletedCount:
 *                   type: number
 *       500:
 *         description: L·ªói server
 */

router.post("/", verifyToken, transactionController.createTransaction);
router.get("/", verifyToken, transactionController.getAllTransactions);
router.delete("/all", verifyToken, async (req, res) => {
  try {
    const result = await require("../models/Transaction").deleteMany({
      userId: req.user.id,
    });
    res.json({
      message: "ƒê√£ x√≥a to√†n b·ªô giao d·ªãch!",
      deletedCount: result.deletedCount,
    });
  } catch (err) {
    res.status(500).json({ message: "L·ªói x√≥a giao d·ªãch", error: err.message });
  }
});

router.delete("/:id", verifyToken, transactionController.deleteTransaction);
router.put("/:id", verifyToken, transactionController.updateTransaction);

module.exports = router;
