/**
 * @swagger
 * tags:
 *   name: Categories
 *   description: üìÇ Qu·∫£n l√Ω danh m·ª•c thu/chi
 *
 * components:
 *   securitySchemes:
 *     bearerAuth:
 *       type: http
 *       scheme: bearer
 *       bearerFormat: JWT
 *
 *   schemas:
 *     Category:
 *       type: object
 *       required:
 *         - name
 *         - type
 *       properties:
 *         _id:
 *           type: string
 *         name:
 *           type: string
 *           example: ƒÇn u·ªëng
 *         type:
 *           type: string
 *           enum: [THUNHAP, CHITIEU]
 *           example: CHITIEU
 *         icon:
 *           type: string
 *           example: fa-utensils
 *         userId:
 *           type: string
 *         isGoalCategory:
 *           type: boolean
 *           default: false
 *           description: ƒê√°nh d·∫•u c√≥ ph·∫£i l√† danh m·ª•c c·ªßa m·ª•c ti√™u hay kh√¥ng
 *         goalId:
 *           type: string
 *           description: ID c·ªßa m·ª•c ti√™u (n·∫øu l√† goal category)
 *         createdAt:
 *           type: string
 *           format: date-time
 *         updatedAt:
 *           type: string
 *           format: date-time
 *         totalAmount:
 *           type: number
 *           description: T·ªïng s·ªë ti·ªÅn c·ªßa c√°c giao d·ªãch thu·ªôc danh m·ª•c
 *     CategoryWithStats:
 *       allOf:
 *         - $ref: '#/components/schemas/Category'
 *         - type: object
 *           properties:
 *             transactionCount:
 *               type: number
 *               description: S·ªë l∆∞·ª£ng giao d·ªãch trong danh m·ª•c
 *             averageAmount:
 *               type: number
 *               description: S·ªë ti·ªÅn trung b√¨nh m·ªói giao d·ªãch
 *             lastTransactionDate:
 *               type: string
 *               format: date-time
 *               description: Ng√†y giao d·ªãch cu·ªëi c√πng
 */

/**
 * @swagger
 * /api/categories:
 *   get:
 *     summary: L·∫•y t·∫•t c·∫£ danh m·ª•c c·ªßa ng∆∞·ªùi d√πng (k√®m t·ªïng s·ªë ti·ªÅn)
 *     tags: [Categories]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: period
 *         schema:
 *           type: string
 *           enum: [day, month, year, custom]
 *         description: Kho·∫£ng th·ªùi gian t√≠nh t·ªïng s·ªë ti·ªÅn
 *       - in: query
 *         name: year
 *         schema:
 *           type: integer
 *         description: NƒÉm (khi period = year ho·∫∑c month)
 *       - in: query
 *         name: month
 *         schema:
 *           type: integer
 *         description: Th√°ng (khi period = month)
 *       - in: query
 *         name: date
 *         schema:
 *           type: string
 *           format: date
 *         description: Ng√†y (khi period = day)
 *       - in: query
 *         name: startDate
 *         schema:
 *           type: string
 *           format: date
 *         description: Ng√†y b·∫Øt ƒë·∫ßu (khi period = custom)
 *       - in: query
 *         name: endDate
 *         schema:
 *           type: string
 *           format: date
 *         description: Ng√†y k·∫øt th√∫c (khi period = custom)
 *     responses:
 *       200:
 *         description: Danh s√°ch danh m·ª•c v·ªõi th·ªëng k√™
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/CategoryWithStats'
 *       500:
 *         description: L·ªói server
 *
 *   post:
 *     summary: T·∫°o danh m·ª•c m·ªõi
 *     tags: [Categories]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - name
 *               - type
 *             properties:
 *               name:
 *                 type: string
 *                 example: ƒÇn u·ªëng
 *               type:
 *                 type: string
 *                 enum: [THUNHAP, CHITIEU]
 *                 example: CHITIEU
 *               icon:
 *                 type: string
 *                 example: fa-utensils
 *     responses:
 *       201:
 *         description: Danh m·ª•c ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Category'
 *       400:
 *         description: Thi·∫øu t√™n ho·∫∑c lo·∫°i danh m·ª•c
 *       500:
 *         description: L·ªói server
 */

/**
 * @swagger
 * /api/categories/all:
 *   delete:
 *     summary: X√≥a t·∫•t c·∫£ danh m·ª•c c·ªßa ng∆∞·ªùi d√πng
 *     tags: [Categories]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: X√≥a th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: ƒê√£ x√≥a to√†n b·ªô danh m·ª•c!
 *                 deletedCount:
 *                   type: number
 *       500:
 *         description: L·ªói server
 */

/**
 * @swagger
 * /api/categories/{id}:
 *   put:
 *     summary: C·∫≠p nh·∫≠t danh m·ª•c
 *     tags: [Categories]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: ID c·ªßa danh m·ª•c
 *     requestBody:
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *               type:
 *                 type: string
 *                 enum: [THUNHAP, CHITIEU]
 *               icon:
 *                 type: string
 *     responses:
 *       200:
 *         description: C·∫≠p nh·∫≠t th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Category'
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y danh m·ª•c
 *
 *   delete:
 *     summary: Xo√° danh m·ª•c
 *     tags: [Categories]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: ID c·ªßa danh m·ª•c
 *     responses:
 *       200:
 *         description: X√≥a th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: X√≥a danh m·ª•c th√†nh c√¥ng
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y danh m·ª•c
 */

const express = require("express");
const router = express.Router();
const verifyToken = require("../middleware/verifyToken");
const {
  getCategories,
  createCategory,
  updateCategory,
  deleteCategory,
} = require("../controllers/categoryController");

router.get("/", verifyToken, getCategories);
router.post("/", verifyToken, createCategory);
router.put("/:id", verifyToken, updateCategory);

router.delete(
  "/all",
  require("../middleware/verifyToken"),
  async (req, res) => {
    try {
      const result = await require("../models/Category").deleteMany({
        userId: req.user.id,
      });
      res.json({
        message: "ƒê√£ x√≥a to√†n b·ªô danh m·ª•c!",
        deletedCount: result.deletedCount,
      });
    } catch (err) {
      res.status(500).json({ message: "L·ªói x√≥a danh m·ª•c", error: err.message });
    }
  }
);

router.delete("/:id", verifyToken, deleteCategory);

module.exports = router;
