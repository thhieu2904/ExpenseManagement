// Test tr·ª±c ti·∫øp optimized Gemini
require("dotenv").config();
const { GoogleGenerativeAI } = require("@google/generative-ai");

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

function getSystemInstructions() {
  const currentYear = new Date().getFullYear();
  const nextYear = currentYear + 1;

  return `B·∫°n l√† AI assistant t√†i ch√≠nh Vi·ªát Nam. Tr·∫£ v·ªÅ JSON thu·∫ßn t√∫y theo format:

{
  "intent": "ADD_ACCOUNT|QUICK_STATS|ADD_TRANSACTION|ADD_CATEGORY|ADD_GOAL|VIEW_ACCOUNTS|QUERY_TRANSACTIONS|UNKNOWN",
  "transaction": null ho·∫∑c {"name":"...","amount":s·ªë,"type":"CHITIEU|THUNHAP","accountGuess":"...","categoryGuess":"..."},
  "category": null ho·∫∑c {"name":"...","type":"CHITIEU|THUNHAP"},
  "account": null ho·∫∑c {"name":"...","type":"TIENMAT|THENGANHANG","bankName":"...","accountNumber":"..."},
  "goal": null ho·∫∑c {"name":"...","targetAmount":s·ªë,"deadline":"YYYY-MM-DD"},
  "responseForUser": "C√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn"
}

QUY T·∫ÆC:
- ADD_ACCOUNT: "t·∫°o t√†i kho·∫£n", "th√™m t√†i kho·∫£n", "m·ªü t√†i kho·∫£n", "t·∫°o v√≠" ‚Üí intent "ADD_ACCOUNT"
  * T·∫°o account object v·ªõi name, type (TIENMAT/THENGANHANG), bankName t·ª´ c√¢u user
  * VD: "t·∫°o t√†i kho·∫£n ACB" ‚Üí {"name":"T√†i kho·∫£n ACB","type":"THENGANHANG","bankName":"ACB","accountNumber":""}

V√ç D·ª§:
User: "t·∫°o t√†i kho·∫£n ACB"
‚Üí {"intent":"ADD_ACCOUNT","account":{"name":"T√†i kho·∫£n ACB","type":"THENGANHANG","bankName":"ACB","accountNumber":""},"responseForUser":"T√¥i s·∫Ω t·∫°o t√†i kho·∫£n ng√¢n h√†ng ACB cho b·∫°n"}`;
}

async function testOptimizedGemini() {
  console.log("üß™ Testing Optimized Gemini System Instructions...\n");

  try {
    const chat = model.startChat({
      systemInstruction: {
        parts: [{ text: getSystemInstructions() }],
        role: "system",
      },
      history: [],
    });

    const contextMessage = `Ng√†y: 2025-07-17
Danh m·ª•c: Ti·ªÅn l∆∞∆°ng, Th∆∞·ªüng, Thu nh·∫≠p kh√°c, ƒÇn u·ªëng, XƒÉng xe
T√†i kho·∫£n: V√≠ c√° nh√¢n, T√†i kho·∫£n Vietcombank, Techcombank
Giao d·ªãch g·∫ßn ƒë√¢y: ƒÇn u·ªëng t·ªïng k·∫øt th√°ng 800,000ƒë, G·ª≠i ti·∫øt ki·ªám 2,500,000ƒë`;

    const fullMessage = `Context: ${contextMessage}\n\nUser: t·∫°o t√†i kho·∫£n acb`;

    console.log("üìù Full message length:", fullMessage.length);
    console.log("üìÑ Full message:");
    console.log(fullMessage);
    console.log("\n" + "=".repeat(50));

    const result = await chat.sendMessage(fullMessage);
    const response = await result.response;
    const text = response.text();

    console.log("üìù Raw Gemini Response:");
    console.log(text);
    console.log("\n" + "=".repeat(50));

    // Parse JSON
    try {
      const cleanedText = text.replace(/```json|```/g, "").trim();
      const jsonResponse = JSON.parse(cleanedText);
      console.log("‚úÖ Parsed JSON:");
      console.log("Intent:", jsonResponse.intent);
      if (jsonResponse.account) {
        console.log("Account:", JSON.stringify(jsonResponse.account, null, 2));
      }
      console.log("Response:", jsonResponse.responseForUser);
    } catch (parseError) {
      console.log("‚ùå Failed to parse JSON:", parseError.message);
    }
  } catch (error) {
    console.log("‚ùå Gemini API Error:", error.message);
  }
}

testOptimizedGemini();
