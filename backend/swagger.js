const swaggerJSDoc = require("swagger-jsdoc");
const swaggerUi = require("swagger-ui-express");

const options = {
  definition: {
    openapi: "3.0.0",
    info: {
      title: "üè¶ Expense Management API",
      version: "2.0.0",
      description: [
        "API t√†i li·ªáu cho h·ªá th·ªëng qu·∫£n l√Ω chi ti√™u c√° nh√¢n.",
        "",
        "‚Ä¢ Ph√°t tri·ªÉn b·ªüi: Nh√≥m 8 - Tr∆∞·ªùng ƒê·∫°i h·ªçc Tr√† Vinh",
        "‚Ä¢ Th√†nh vi√™n: Nguy·ªÖn Thanh Hi·∫øu (thhieu2904), Ph·∫°m Ho√†ng Kha, Nguy·ªÖn Tr√≠ C∆∞·ªùng",
        "",
        "T√≠nh nƒÉng n·ªïi b·∫≠t:",
        "- X√°c th·ª±c ng∆∞·ªùi d√πng (JWT) v√† ph√¢n quy·ªÅn",
        "- Qu·∫£n l√Ω t√†i kho·∫£n ng√¢n h√†ng, danh m·ª•c thu chi, giao d·ªãch, m·ª•c ti√™u ti·∫øt ki·ªám",
        "- Th·ªëng k√™ b√°o c√°o chi ti·∫øt, AI Assistant h·ªó tr·ª£ t√†i ch√≠nh",
        "",
        "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:",
        "1. ƒêƒÉng k√Ω ho·∫∑c ƒëƒÉng nh·∫≠p t√†i kho·∫£n",
        "2. Th√™m Bearer token v√†o header Authorization",
        "3. S·ª≠ d·ª•ng c√°c endpoint ƒë·ªÉ qu·∫£n l√Ω d·ªØ li·ªáu c√° nh√¢n",
      ].join("\n"),
      contact: {
        name: "Nh√≥m 8 - Nguy·ªÖn Thanh Hi·∫øu",
        email: "thhieu2904@gmail.com",
        url: "https://github.com/thhieu2904/ExpenseManagement",
      },
      license: {
        name: "MIT",
        url: "https://opensource.org/licenses/MIT",
      },
    },
    servers: [
      {
        url: "http://localhost:5000",
        description: "üñ•Ô∏è Development Server",
      },
      {
        url: "https://expense-management-backend-production.onrender.com",
        description: "üåê Production Server",
      },
    ],
    components: {
      securitySchemes: {
        bearerAuth: {
          type: "http",
          scheme: "bearer",
          bearerFormat: "JWT",
          description: "Nh·∫≠p JWT token sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng",
        },
      },
      responses: {
        UnauthorizedError: {
          description: "Access token is missing or invalid",
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  message: {
                    type: "string",
                    example: "Token kh√¥ng h·ª£p l·ªá",
                  },
                },
              },
            },
          },
        },
        NotFoundError: {
          description: "Resource not found",
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  message: {
                    type: "string",
                    example: "Kh√¥ng t√¨m th·∫•y t√†i nguy√™n",
                  },
                },
              },
            },
          },
        },
        ValidationError: {
          description: "Validation error",
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  message: {
                    type: "string",
                    example: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
                  },
                  errors: {
                    type: "array",
                    items: {
                      type: "string",
                    },
                  },
                },
              },
            },
          },
        },
        ServerError: {
          description: "Internal server error",
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  message: {
                    type: "string",
                    example: "L·ªói server n·ªôi b·ªô",
                  },
                  error: {
                    type: "string",
                  },
                },
              },
            },
          },
        },
      },
    },
    security: [
      {
        bearerAuth: [],
      },
    ],
    tags: [
      {
        name: "Auth",
        description: "üîê X√°c th·ª±c v√† ph√¢n quy·ªÅn",
      },
      {
        name: "Users",
        description: "üë§ Qu·∫£n l√Ω th√¥ng tin ng∆∞·ªùi d√πng",
      },
      {
        name: "Categories",
        description: "üìÇ Qu·∫£n l√Ω danh m·ª•c thu/chi",
      },
      {
        name: "Accounts",
        description: "üè¶ Qu·∫£n l√Ω t√†i kho·∫£n ng√¢n h√†ng",
      },
      {
        name: "Transactions",
        description: "üí∏ Qu·∫£n l√Ω giao d·ªãch thu/chi",
      },
      {
        name: "Goals",
        description: "üéØ Qu·∫£n l√Ω m·ª•c ti√™u ti·∫øt ki·ªám",
      },
      {
        name: "Statistics",
        description: "üìä Th·ªëng k√™ v√† b√°o c√°o",
      },
      {
        name: "AI Assistant",
        description: "ü§ñ Tr·ª£ l√Ω AI th√¥ng minh",
      },
    ],
  },
  apis: ["./routes/*.js", "./controllers/*.js"], // Qu√©t c√°c route v√† controller ƒë·ªÉ l·∫•y m√¥ t·∫£
};

const swaggerSpec = swaggerJSDoc(options);

// Customize Swagger UI options
const swaggerUIOptions = {
  customCss: `
    .swagger-ui .topbar { display: none }
    .swagger-ui .info hgroup.main a { color: #3b82f6; }
    .swagger-ui .scheme-container { 
      background: linear-gradient(90deg, #3b82f6 0%, #1d4ed8 100%);
      padding: 10px;
      border-radius: 8px;
    }
    .swagger-ui .info .title {
      color: #1f2937;
      font-size: 2.5rem;
      font-weight: bold;
    }
  `,
  customSiteTitle: "Expense Management API Docs",
  customfavIcon: "/favicon.ico",
  swaggerOptions: {
    persistAuthorization: true,
    displayRequestDuration: true,
    filter: true,
    showExtensions: true,
    showCommonExtensions: true,
    docExpansion: "none",
    defaultModelsExpandDepth: 2,
    defaultModelExpandDepth: 2,
  },
};

module.exports = {
  swaggerUi,
  swaggerSpec,
  swaggerUIOptions,
};
